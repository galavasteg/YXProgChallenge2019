"""
В одном городе запретили машинам останавливаться,
кроме как для посадки пасажира. А пассажир не
согласен ждать больше 3 минут. В этом городе
пешеход заказывает такси в точку X и указывает
интервал в 180 секунд. Водитель должен приехать
ровно в этот интервал. Если приехать раньше, то
ожидать пассажира будет нельзя. Если приехать
слишком поздно, то разозленный пассажир отменит
заказ.

Из-за подобных ограничений в этом городе осталось
всего Z водителей, каждый из которых в момент
старта задачи находится в какой-то вершине графа
дорожного движения. Система управления должна
назначить наилучшего водителя из тех, которые
успеют приехать в указанный интервал. Наилучшим
водителем считается тот, который приедет на заказ
максимально близко к началу интервала. Если таких
водителей несколько, то любой из них.

Нужно для каждого водителя определить, успевает
ли он приехать в указанный интервал, и если да -
то к какому самому раннему моменту времени в
указанном интервале он может приехать.

Формальное описание
Дано:
1. Ориентированный граф G с N вершинами и K ребрами,
   вершины пронумерованы от 0 до N-1, 0 ≤ N ≤ 10^4,
   0 ≤ K ≤ 10^4. Каждому ребру соответствует время
   поездки в нем - целое число W, 10 ≤ W ≤ 10^4.
2. Позиция заказа на графе ID_target
3. Z позиций водителей на графе ID_sourcez,
   1 ≤ Z ≤ 10^4
4. Время t0, 0 ≤ t0 ≤ 600 - целое число
Надо для каждого водителя найти такоe t_min что:
1. существует такой маршрут от ID_sourcez водителя
   к ID_target, что водитель приезжает в t_min
2. t_min ∈ [t0; t0+180]
3. и это самый ранний возможный t_min : t_min ≤ t_i
   для любого t_i, удовлетворяющего пунктам 1 и 2;
4. Или убедиться, что такого t_min не существует
"""

from pathlib import Path


scriptDir = Path.cwd()


def main():
    pass


if __name__ == '__main__':
    main()

